// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadVxlanAgentUnknownUnicastFlooding returns the embedded CollectionSpec for VxlanAgentUnknownUnicastFlooding.
func LoadVxlanAgentUnknownUnicastFlooding() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_VxlanAgentUnknownUnicastFloodingBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load VxlanAgentUnknownUnicastFlooding: %w", err)
	}

	return spec, err
}

// LoadVxlanAgentUnknownUnicastFloodingObjects loads VxlanAgentUnknownUnicastFlooding and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*VxlanAgentUnknownUnicastFloodingObjects
//	*VxlanAgentUnknownUnicastFloodingPrograms
//	*VxlanAgentUnknownUnicastFloodingMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadVxlanAgentUnknownUnicastFloodingObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadVxlanAgentUnknownUnicastFlooding()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// VxlanAgentUnknownUnicastFloodingSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type VxlanAgentUnknownUnicastFloodingSpecs struct {
	VxlanAgentUnknownUnicastFloodingProgramSpecs
	VxlanAgentUnknownUnicastFloodingMapSpecs
}

// VxlanAgentUnknownUnicastFloodingSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type VxlanAgentUnknownUnicastFloodingProgramSpecs struct {
	VxlanAgentUnknownUnicastFlooding *ebpf.ProgramSpec `ebpf:"vxlan_agent_unknown_unicast_flooding"`
}

// VxlanAgentUnknownUnicastFloodingMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type VxlanAgentUnknownUnicastFloodingMapSpecs struct {
	InterfacesArray       *ebpf.MapSpec `ebpf:"interfaces_array"`
	InterfacesArrayLength *ebpf.MapSpec `ebpf:"interfaces_array_length"`
}

// VxlanAgentUnknownUnicastFloodingObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadVxlanAgentUnknownUnicastFloodingObjects or ebpf.CollectionSpec.LoadAndAssign.
type VxlanAgentUnknownUnicastFloodingObjects struct {
	VxlanAgentUnknownUnicastFloodingPrograms
	VxlanAgentUnknownUnicastFloodingMaps
}

func (o *VxlanAgentUnknownUnicastFloodingObjects) Close() error {
	return _VxlanAgentUnknownUnicastFloodingClose(
		&o.VxlanAgentUnknownUnicastFloodingPrograms,
		&o.VxlanAgentUnknownUnicastFloodingMaps,
	)
}

// VxlanAgentUnknownUnicastFloodingMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadVxlanAgentUnknownUnicastFloodingObjects or ebpf.CollectionSpec.LoadAndAssign.
type VxlanAgentUnknownUnicastFloodingMaps struct {
	InterfacesArray       *ebpf.Map `ebpf:"interfaces_array"`
	InterfacesArrayLength *ebpf.Map `ebpf:"interfaces_array_length"`
}

func (m *VxlanAgentUnknownUnicastFloodingMaps) Close() error {
	return _VxlanAgentUnknownUnicastFloodingClose(
		m.InterfacesArray,
		m.InterfacesArrayLength,
	)
}

// VxlanAgentUnknownUnicastFloodingPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadVxlanAgentUnknownUnicastFloodingObjects or ebpf.CollectionSpec.LoadAndAssign.
type VxlanAgentUnknownUnicastFloodingPrograms struct {
	VxlanAgentUnknownUnicastFlooding *ebpf.Program `ebpf:"vxlan_agent_unknown_unicast_flooding"`
}

func (p *VxlanAgentUnknownUnicastFloodingPrograms) Close() error {
	return _VxlanAgentUnknownUnicastFloodingClose(
		p.VxlanAgentUnknownUnicastFlooding,
	)
}

func _VxlanAgentUnknownUnicastFloodingClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed vxlanagentunknownunicastflooding_bpfel.o
var _VxlanAgentUnknownUnicastFloodingBytes []byte
