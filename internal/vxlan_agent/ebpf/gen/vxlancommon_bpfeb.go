// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type VxlanCommonExternalRouteInfo struct {
	ExternalIfaceIndex      uint32
	ExternalIfaceMac        VxlanCommonMacAddress
	ExternalIfaceNextHopMac VxlanCommonMacAddress
	ExternalIfaceIp         VxlanCommonInAddr
}

type VxlanCommonInAddr struct{ S_addr uint32 }

type VxlanCommonIpv4LpmKey struct {
	Prefixlen uint32
	Data      [4]uint8
}

type VxlanCommonMacAddress struct{ Addr [6]uint8 }

type VxlanCommonMacTableEntry struct {
	ExpirationTimer     struct{ Opaque [2]uint64 }
	Ifindex             uint32
	_                   [4]byte
	LastSeenTimestampNs uint64
	BorderIp            VxlanCommonInAddr
	_                   [4]byte
}

type VxlanCommonNetworkVni struct {
	Vni                   uint32
	Network               VxlanCommonIpv4LpmKey
	InternalIfindexes     [10]uint32
	InternalIfindexesSize uint32
	BorderIps             [10]VxlanCommonInAddr
	BorderIpsSize         uint32
}

type VxlanCommonNetworkVniLight struct {
	Vni     uint32
	Network VxlanCommonIpv4LpmKey
}

// LoadVxlanCommon returns the embedded CollectionSpec for VxlanCommon.
func LoadVxlanCommon() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_VxlanCommonBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load VxlanCommon: %w", err)
	}

	return spec, err
}

// LoadVxlanCommonObjects loads VxlanCommon and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*VxlanCommonObjects
//	*VxlanCommonPrograms
//	*VxlanCommonMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadVxlanCommonObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadVxlanCommon()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// VxlanCommonSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type VxlanCommonSpecs struct {
	VxlanCommonProgramSpecs
	VxlanCommonMapSpecs
}

// VxlanCommonSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type VxlanCommonProgramSpecs struct {
}

// VxlanCommonMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type VxlanCommonMapSpecs struct {
	DummyExternalRouteInfo *ebpf.MapSpec `ebpf:"dummy_external_route_info"`
	DummyInAddr            *ebpf.MapSpec `ebpf:"dummy_in_addr"`
	DummyIpv4LpmKey        *ebpf.MapSpec `ebpf:"dummy_ipv4_lpm_key"`
	DummyMacAddress        *ebpf.MapSpec `ebpf:"dummy_mac_address"`
	DummyMacTableEntry     *ebpf.MapSpec `ebpf:"dummy_mac_table_entry"`
	DummyNetworkVni        *ebpf.MapSpec `ebpf:"dummy_network_vni"`
	DummyNetworkVniLight   *ebpf.MapSpec `ebpf:"dummy_network_vni_light"`
}

// VxlanCommonObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadVxlanCommonObjects or ebpf.CollectionSpec.LoadAndAssign.
type VxlanCommonObjects struct {
	VxlanCommonPrograms
	VxlanCommonMaps
}

func (o *VxlanCommonObjects) Close() error {
	return _VxlanCommonClose(
		&o.VxlanCommonPrograms,
		&o.VxlanCommonMaps,
	)
}

// VxlanCommonMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadVxlanCommonObjects or ebpf.CollectionSpec.LoadAndAssign.
type VxlanCommonMaps struct {
	DummyExternalRouteInfo *ebpf.Map `ebpf:"dummy_external_route_info"`
	DummyInAddr            *ebpf.Map `ebpf:"dummy_in_addr"`
	DummyIpv4LpmKey        *ebpf.Map `ebpf:"dummy_ipv4_lpm_key"`
	DummyMacAddress        *ebpf.Map `ebpf:"dummy_mac_address"`
	DummyMacTableEntry     *ebpf.Map `ebpf:"dummy_mac_table_entry"`
	DummyNetworkVni        *ebpf.Map `ebpf:"dummy_network_vni"`
	DummyNetworkVniLight   *ebpf.Map `ebpf:"dummy_network_vni_light"`
}

func (m *VxlanCommonMaps) Close() error {
	return _VxlanCommonClose(
		m.DummyExternalRouteInfo,
		m.DummyInAddr,
		m.DummyIpv4LpmKey,
		m.DummyMacAddress,
		m.DummyMacTableEntry,
		m.DummyNetworkVni,
		m.DummyNetworkVniLight,
	)
}

// VxlanCommonPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadVxlanCommonObjects or ebpf.CollectionSpec.LoadAndAssign.
type VxlanCommonPrograms struct {
}

func (p *VxlanCommonPrograms) Close() error {
	return _VxlanCommonClose()
}

func _VxlanCommonClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed vxlancommon_bpfeb.o
var _VxlanCommonBytes []byte
