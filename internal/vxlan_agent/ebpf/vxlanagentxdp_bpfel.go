// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type VxlanAgentXDPIfaceIndex struct {
	InterfaceIndex uint32
	_              [4]byte
	Timestamp      uint64
}

type VxlanAgentXDPMacAddress struct{ Mac [6]uint8 }

type VxlanAgentXDPMacAddressIfaceEntry struct {
	Mac   VxlanAgentXDPMacAddress
	_     [2]byte
	Iface VxlanAgentXDPIfaceIndex
}

// LoadVxlanAgentXDP returns the embedded CollectionSpec for VxlanAgentXDP.
func LoadVxlanAgentXDP() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_VxlanAgentXDPBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load VxlanAgentXDP: %w", err)
	}

	return spec, err
}

// LoadVxlanAgentXDPObjects loads VxlanAgentXDP and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*VxlanAgentXDPObjects
//	*VxlanAgentXDPPrograms
//	*VxlanAgentXDPMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadVxlanAgentXDPObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadVxlanAgentXDP()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// VxlanAgentXDPSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type VxlanAgentXDPSpecs struct {
	VxlanAgentXDPProgramSpecs
	VxlanAgentXDPMapSpecs
}

// VxlanAgentXDPSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type VxlanAgentXDPProgramSpecs struct {
	VxlanAgentXdp *ebpf.ProgramSpec `ebpf:"vxlan_agent_xdp"`
}

// VxlanAgentXDPMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type VxlanAgentXDPMapSpecs struct {
	MacTable               *ebpf.MapSpec `ebpf:"mac_table"`
	NewDiscoveredEntriesRb *ebpf.MapSpec `ebpf:"new_discovered_entries_rb"`
}

// VxlanAgentXDPObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadVxlanAgentXDPObjects or ebpf.CollectionSpec.LoadAndAssign.
type VxlanAgentXDPObjects struct {
	VxlanAgentXDPPrograms
	VxlanAgentXDPMaps
}

func (o *VxlanAgentXDPObjects) Close() error {
	return _VxlanAgentXDPClose(
		&o.VxlanAgentXDPPrograms,
		&o.VxlanAgentXDPMaps,
	)
}

// VxlanAgentXDPMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadVxlanAgentXDPObjects or ebpf.CollectionSpec.LoadAndAssign.
type VxlanAgentXDPMaps struct {
	MacTable               *ebpf.Map `ebpf:"mac_table"`
	NewDiscoveredEntriesRb *ebpf.Map `ebpf:"new_discovered_entries_rb"`
}

func (m *VxlanAgentXDPMaps) Close() error {
	return _VxlanAgentXDPClose(
		m.MacTable,
		m.NewDiscoveredEntriesRb,
	)
}

// VxlanAgentXDPPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadVxlanAgentXDPObjects or ebpf.CollectionSpec.LoadAndAssign.
type VxlanAgentXDPPrograms struct {
	VxlanAgentXdp *ebpf.Program `ebpf:"vxlan_agent_xdp"`
}

func (p *VxlanAgentXDPPrograms) Close() error {
	return _VxlanAgentXDPClose(
		p.VxlanAgentXdp,
	)
}

func _VxlanAgentXDPClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed vxlanagentxdp_bpfel.o
var _VxlanAgentXDPBytes []byte
