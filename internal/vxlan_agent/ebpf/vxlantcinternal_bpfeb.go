// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type VxlanTCInternalExternalRouteInfo struct {
	ExternalIfaceIndex      uint32
	ExternalIfaceMac        struct{ Addr [6]uint8 }
	ExternalIfaceNextHopMac struct{ Addr [6]uint8 }
	ExternalIfaceIp         VxlanTCInternalInAddr
}

type VxlanTCInternalInAddr struct{ S_addr uint32 }

// LoadVxlanTCInternal returns the embedded CollectionSpec for VxlanTCInternal.
func LoadVxlanTCInternal() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_VxlanTCInternalBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load VxlanTCInternal: %w", err)
	}

	return spec, err
}

// LoadVxlanTCInternalObjects loads VxlanTCInternal and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*VxlanTCInternalObjects
//	*VxlanTCInternalPrograms
//	*VxlanTCInternalMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadVxlanTCInternalObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadVxlanTCInternal()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// VxlanTCInternalSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type VxlanTCInternalSpecs struct {
	VxlanTCInternalProgramSpecs
	VxlanTCInternalMapSpecs
}

// VxlanTCInternalSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type VxlanTCInternalProgramSpecs struct {
	VxlanTcInternal *ebpf.ProgramSpec `ebpf:"vxlan_tc_internal"`
}

// VxlanTCInternalMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type VxlanTCInternalMapSpecs struct {
	BorderIpToRouteInfoMap       *ebpf.MapSpec `ebpf:"border_ip_to_route_info_map"`
	InternalIfindexesArray       *ebpf.MapSpec `ebpf:"internal_ifindexes_array"`
	InternalIfindexesArrayLength *ebpf.MapSpec `ebpf:"internal_ifindexes_array_length"`
	RemoteBorderIpsArray         *ebpf.MapSpec `ebpf:"remote_border_ips_array"`
	RemoteBorderIpsArrayLength   *ebpf.MapSpec `ebpf:"remote_border_ips_array_length"`
}

// VxlanTCInternalObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadVxlanTCInternalObjects or ebpf.CollectionSpec.LoadAndAssign.
type VxlanTCInternalObjects struct {
	VxlanTCInternalPrograms
	VxlanTCInternalMaps
}

func (o *VxlanTCInternalObjects) Close() error {
	return _VxlanTCInternalClose(
		&o.VxlanTCInternalPrograms,
		&o.VxlanTCInternalMaps,
	)
}

// VxlanTCInternalMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadVxlanTCInternalObjects or ebpf.CollectionSpec.LoadAndAssign.
type VxlanTCInternalMaps struct {
	BorderIpToRouteInfoMap       *ebpf.Map `ebpf:"border_ip_to_route_info_map"`
	InternalIfindexesArray       *ebpf.Map `ebpf:"internal_ifindexes_array"`
	InternalIfindexesArrayLength *ebpf.Map `ebpf:"internal_ifindexes_array_length"`
	RemoteBorderIpsArray         *ebpf.Map `ebpf:"remote_border_ips_array"`
	RemoteBorderIpsArrayLength   *ebpf.Map `ebpf:"remote_border_ips_array_length"`
}

func (m *VxlanTCInternalMaps) Close() error {
	return _VxlanTCInternalClose(
		m.BorderIpToRouteInfoMap,
		m.InternalIfindexesArray,
		m.InternalIfindexesArrayLength,
		m.RemoteBorderIpsArray,
		m.RemoteBorderIpsArrayLength,
	)
}

// VxlanTCInternalPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadVxlanTCInternalObjects or ebpf.CollectionSpec.LoadAndAssign.
type VxlanTCInternalPrograms struct {
	VxlanTcInternal *ebpf.Program `ebpf:"vxlan_tc_internal"`
}

func (p *VxlanTCInternalPrograms) Close() error {
	return _VxlanTCInternalClose(
		p.VxlanTcInternal,
	)
}

func _VxlanTCInternalClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed vxlantcinternal_bpfeb.o
var _VxlanTCInternalBytes []byte
