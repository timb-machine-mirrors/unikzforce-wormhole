// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type VxlanXDPInternalExternalRouteInfo struct {
	ExternalIfaceIndex      uint32
	ExternalIfaceMac        VxlanXDPInternalMacAddress
	ExternalIfaceNextHopMac VxlanXDPInternalMacAddress
	ExternalIfaceIp         VxlanXDPInternalInAddr
}

type VxlanXDPInternalInAddr struct{ S_addr uint32 }

type VxlanXDPInternalInternalNetworkVni struct{ Vni uint32 }

type VxlanXDPInternalIpv4LpmKey struct {
	Prefixlen uint32
	Data      [4]uint8
}

type VxlanXDPInternalMacAddress struct{ Addr [6]uint8 }

type VxlanXDPInternalMacTableEntry struct {
	ExpirationTimer     struct{ Opaque [2]uint64 }
	Ifindex             uint32
	_                   [4]byte
	LastSeenTimestampNs uint64
	BorderIp            VxlanXDPInternalInAddr
	_                   [4]byte
}

// LoadVxlanXDPInternal returns the embedded CollectionSpec for VxlanXDPInternal.
func LoadVxlanXDPInternal() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_VxlanXDPInternalBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load VxlanXDPInternal: %w", err)
	}

	return spec, err
}

// LoadVxlanXDPInternalObjects loads VxlanXDPInternal and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*VxlanXDPInternalObjects
//	*VxlanXDPInternalPrograms
//	*VxlanXDPInternalMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadVxlanXDPInternalObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadVxlanXDPInternal()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// VxlanXDPInternalSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type VxlanXDPInternalSpecs struct {
	VxlanXDPInternalProgramSpecs
	VxlanXDPInternalMapSpecs
}

// VxlanXDPInternalSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type VxlanXDPInternalProgramSpecs struct {
	VxlanXdpInternal *ebpf.ProgramSpec `ebpf:"vxlan_xdp_internal"`
}

// VxlanXDPInternalMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type VxlanXDPInternalMapSpecs struct {
	BorderIpToRouteInfoMap *ebpf.MapSpec `ebpf:"border_ip_to_route_info_map"`
	IfindexIsInternalMap   *ebpf.MapSpec `ebpf:"ifindex_is_internal_map"`
	InternalNetworksMap    *ebpf.MapSpec `ebpf:"internal_networks_map"`
	MacTable               *ebpf.MapSpec `ebpf:"mac_table"`
}

// VxlanXDPInternalObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadVxlanXDPInternalObjects or ebpf.CollectionSpec.LoadAndAssign.
type VxlanXDPInternalObjects struct {
	VxlanXDPInternalPrograms
	VxlanXDPInternalMaps
}

func (o *VxlanXDPInternalObjects) Close() error {
	return _VxlanXDPInternalClose(
		&o.VxlanXDPInternalPrograms,
		&o.VxlanXDPInternalMaps,
	)
}

// VxlanXDPInternalMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadVxlanXDPInternalObjects or ebpf.CollectionSpec.LoadAndAssign.
type VxlanXDPInternalMaps struct {
	BorderIpToRouteInfoMap *ebpf.Map `ebpf:"border_ip_to_route_info_map"`
	IfindexIsInternalMap   *ebpf.Map `ebpf:"ifindex_is_internal_map"`
	InternalNetworksMap    *ebpf.Map `ebpf:"internal_networks_map"`
	MacTable               *ebpf.Map `ebpf:"mac_table"`
}

func (m *VxlanXDPInternalMaps) Close() error {
	return _VxlanXDPInternalClose(
		m.BorderIpToRouteInfoMap,
		m.IfindexIsInternalMap,
		m.InternalNetworksMap,
		m.MacTable,
	)
}

// VxlanXDPInternalPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadVxlanXDPInternalObjects or ebpf.CollectionSpec.LoadAndAssign.
type VxlanXDPInternalPrograms struct {
	VxlanXdpInternal *ebpf.Program `ebpf:"vxlan_xdp_internal"`
}

func (p *VxlanXDPInternalPrograms) Close() error {
	return _VxlanXDPInternalClose(
		p.VxlanXdpInternal,
	)
}

func _VxlanXDPInternalClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed vxlanxdpinternal_bpfel.o
var _VxlanXDPInternalBytes []byte
