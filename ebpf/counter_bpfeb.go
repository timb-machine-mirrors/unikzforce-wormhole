// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadCounter returns the embedded CollectionSpec for Counter.
func LoadCounter() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_CounterBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Counter: %w", err)
	}

	return spec, err
}

// LoadCounterObjects loads Counter and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*CounterObjects
//	*CounterPrograms
//	*CounterMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadCounterObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadCounter()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// CounterSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type CounterSpecs struct {
	CounterProgramSpecs
	CounterMapSpecs
}

// CounterSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type CounterProgramSpecs struct {
	CountPackets *ebpf.ProgramSpec `ebpf:"count_packets"`
}

// CounterMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type CounterMapSpecs struct {
	PktCount *ebpf.MapSpec `ebpf:"pkt_count"`
}

// CounterObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadCounterObjects or ebpf.CollectionSpec.LoadAndAssign.
type CounterObjects struct {
	CounterPrograms
	CounterMaps
}

func (o *CounterObjects) Close() error {
	return _CounterClose(
		&o.CounterPrograms,
		&o.CounterMaps,
	)
}

// CounterMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadCounterObjects or ebpf.CollectionSpec.LoadAndAssign.
type CounterMaps struct {
	PktCount *ebpf.Map `ebpf:"pkt_count"`
}

func (m *CounterMaps) Close() error {
	return _CounterClose(
		m.PktCount,
	)
}

// CounterPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadCounterObjects or ebpf.CollectionSpec.LoadAndAssign.
type CounterPrograms struct {
	CountPackets *ebpf.Program `ebpf:"count_packets"`
}

func (p *CounterPrograms) Close() error {
	return _CounterClose(
		p.CountPackets,
	)
}

func _CounterClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed counter_bpfeb.o
var _CounterBytes []byte
