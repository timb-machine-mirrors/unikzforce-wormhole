// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: cmd/test_agent/test_agent.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TestAgentService_WaitUntilReady_FullMethodName     = "/generated.TestAgentService/WaitUntilReady"
	TestAgentService_Ping_FullMethodName               = "/generated.TestAgentService/Ping"
	TestAgentService_EnableSwitchAgent_FullMethodName  = "/generated.TestAgentService/EnableSwitchAgent"
	TestAgentService_DisableSwitchAgent_FullMethodName = "/generated.TestAgentService/DisableSwitchAgent"
)

// TestAgentServiceClient is the client API for TestAgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestAgentServiceClient interface {
	WaitUntilReady(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WaitUntilReadyResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	EnableSwitchAgent(ctx context.Context, in *EnableSwitchAgentRequest, opts ...grpc.CallOption) (*EnableSwitchAgentResponse, error)
	DisableSwitchAgent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type testAgentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestAgentServiceClient(cc grpc.ClientConnInterface) TestAgentServiceClient {
	return &testAgentServiceClient{cc}
}

func (c *testAgentServiceClient) WaitUntilReady(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WaitUntilReadyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WaitUntilReadyResponse)
	err := c.cc.Invoke(ctx, TestAgentService_WaitUntilReady_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testAgentServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, TestAgentService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testAgentServiceClient) EnableSwitchAgent(ctx context.Context, in *EnableSwitchAgentRequest, opts ...grpc.CallOption) (*EnableSwitchAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableSwitchAgentResponse)
	err := c.cc.Invoke(ctx, TestAgentService_EnableSwitchAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testAgentServiceClient) DisableSwitchAgent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TestAgentService_DisableSwitchAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestAgentServiceServer is the server API for TestAgentService service.
// All implementations must embed UnimplementedTestAgentServiceServer
// for forward compatibility.
type TestAgentServiceServer interface {
	WaitUntilReady(context.Context, *emptypb.Empty) (*WaitUntilReadyResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	EnableSwitchAgent(context.Context, *EnableSwitchAgentRequest) (*EnableSwitchAgentResponse, error)
	DisableSwitchAgent(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedTestAgentServiceServer()
}

// UnimplementedTestAgentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTestAgentServiceServer struct{}

func (UnimplementedTestAgentServiceServer) WaitUntilReady(context.Context, *emptypb.Empty) (*WaitUntilReadyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitUntilReady not implemented")
}
func (UnimplementedTestAgentServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedTestAgentServiceServer) EnableSwitchAgent(context.Context, *EnableSwitchAgentRequest) (*EnableSwitchAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableSwitchAgent not implemented")
}
func (UnimplementedTestAgentServiceServer) DisableSwitchAgent(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableSwitchAgent not implemented")
}
func (UnimplementedTestAgentServiceServer) mustEmbedUnimplementedTestAgentServiceServer() {}
func (UnimplementedTestAgentServiceServer) testEmbeddedByValue()                          {}

// UnsafeTestAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestAgentServiceServer will
// result in compilation errors.
type UnsafeTestAgentServiceServer interface {
	mustEmbedUnimplementedTestAgentServiceServer()
}

func RegisterTestAgentServiceServer(s grpc.ServiceRegistrar, srv TestAgentServiceServer) {
	// If the following call pancis, it indicates UnimplementedTestAgentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TestAgentService_ServiceDesc, srv)
}

func _TestAgentService_WaitUntilReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestAgentServiceServer).WaitUntilReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestAgentService_WaitUntilReady_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestAgentServiceServer).WaitUntilReady(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestAgentService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestAgentServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestAgentService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestAgentServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestAgentService_EnableSwitchAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableSwitchAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestAgentServiceServer).EnableSwitchAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestAgentService_EnableSwitchAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestAgentServiceServer).EnableSwitchAgent(ctx, req.(*EnableSwitchAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestAgentService_DisableSwitchAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestAgentServiceServer).DisableSwitchAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestAgentService_DisableSwitchAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestAgentServiceServer).DisableSwitchAgent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TestAgentService_ServiceDesc is the grpc.ServiceDesc for TestAgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestAgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "generated.TestAgentService",
	HandlerType: (*TestAgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WaitUntilReady",
			Handler:    _TestAgentService_WaitUntilReady_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _TestAgentService_Ping_Handler,
		},
		{
			MethodName: "EnableSwitchAgent",
			Handler:    _TestAgentService_EnableSwitchAgent_Handler,
		},
		{
			MethodName: "DisableSwitchAgent",
			Handler:    _TestAgentService_DisableSwitchAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/test_agent/test_agent.proto",
}
